REVOKE CREATE ON SCHEMA public FROM PUBLIC;

DROP TABLE IF EXISTS PAYMENTS cascade;
DROP TABLE IF EXISTS USERS cascade;
DROP TABLE IF EXISTS ORDERS cascade;
DROP TABLE IF EXISTS PRODUCTS cascade;
DROP TABLE IF EXISTS PRODUCTS_ATTRIBUTES cascade;
DROP TABLE IF EXISTS PRODUCTS_PARAMETERS cascade;
DROP TABLE IF EXISTS FEEDBACK cascade;
DROP TABLE IF EXISTS ORDER_PRODUCTS cascade;
DROP TABLE IF EXISTS DELIVERIES cascade;

DROP SEQUENCE IF EXISTS PAYMENTS_SEQ cascade;
DROP SEQUENCE IF EXISTS USERS_SEQ cascade;
DROP SEQUENCE IF EXISTS ORDERS_SEQ cascade;
DROP SEQUENCE IF EXISTS PRODUCTS_SEQ cascade;
DROP SEQUENCE IF EXISTS PRODUCTS_ATTRIBUTES_SEQ cascade;
DROP SEQUENCE IF EXISTS PRODUCTS_PARAMETERS_SEQ cascade;
DROP SEQUENCE IF EXISTS FEEDBACK_SEQ cascade;
DROP SEQUENCE IF EXISTS DELIVERIES_SEQ cascade;

CREATE TABLE PAYMENTS
(
    PAYMENT_ID integer NOT NULL,
    PAYMENT_TYPE text NOT NULL,
    PAYMENT_AMOUNT numeric NOT NULL,
    ISPAID boolean NOT NULL,
    CONSTRAINT "PAYMENT_PK" PRIMARY KEY (PAYMENT_ID)
);

CREATE TABLE USERS (
        USER_ID       integer NOT NULL,
        USER_NAME     text NOT NULL,
        USER_SURNAME  text,
        USER_EMAIL    text NOT NULL,
        USER_PHONE    text,
        USER_PASSWORD text NOT NULL,
        USER_ADDRESS  text,
        ISADMIN       smallint NOT NULL,
        CONSTRAINT  "USERS_PK" PRIMARY KEY (USER_ID)
);

CREATE table DELIVERIES (
        DELIVERY_ID      integer NOT NULL,
        RECEIVER_NAME    text NOT NULL,
        RECEIVER_SURNAME text NOT NULL,
        ADDRESS          text NOT NULL,
        PHONE            text NOT NULL,
        constraint  "DELIVERIES_PK" primary key (DELIVERY_ID)
);

CREATE table ORDERS (
        ORDER_ID    integer NOT NULL,
        ORDER_DATE  TIMESTAMP NOT NULL,
        USER_ID     integer NOT NULL,
        PAYMENT_ID  integer NOT NULL,
        DELIVERY_ID integer NOT NULL,
        constraint  "ORDERS_PK" primary key (ORDER_ID)
);

CREATE table PRODUCTS (
        PRODUCT_ID   integer NOT NULL,
        PARENT_ID    integer,
        PRODUCT_NAME text NOT NULL,
        ISCATEGORY   smallint NOT NULL,
        constraint  "PRODUCTS_PK" primary key (PRODUCT_ID)
);

CREATE table ORDER_PRODUCTS (
        ORDER_ID   integer NOT NULL,
        PRODUCT_ID integer NOT NULL,
        AMOUNT     integer NOT NULL,
        PRICE      NUMERIC(6,0) NOT NULL
);

CREATE table PRODUCTS_ATTRIBUTES (
        ATTRIBUTE_ID   integer NOT NULL,
        PRODUCT_ID     integer NOT NULL,
        ATTRIBUTE_NAME text NOT NULL,
        constraint  "PRODUCTS_ATTRIBUTES_PK" primary key (ATTRIBUTE_ID)
);

CREATE table PRODUCTS_PARAMETERS (
        PRODUCT_ID integer NOT NULL,
        ATTR_ID    integer NOT NULL,
        VALUE      text NOT NULL
);

CREATE table FEEDBACK (
        FEEDBACK_ID      integer NOT NULL,
        USER_ID          integer NOT NULL,
        PRODUCT_ID       integer NOT NULL,
        FEEDBACK_RAITING NUMERIC(5,0),
        FEEDBACK_MESSAGE text,
        constraint  "FEEDBACK_PK" primary key (FEEDBACK_ID)
);

CREATE SEQUENCE PAYMENTS_SEQ
    INCREMENT 1
    START 1000000
;
CREATE SEQUENCE USERS_SEQ
    INCREMENT 1
    START 1000000
;
CREATE SEQUENCE ORDERS_SEQ
    INCREMENT 1
    START 1000000
;
CREATE SEQUENCE PRODUCTS_SEQ
    INCREMENT 1
    START 1000000
;
CREATE SEQUENCE PRODUCTS_ATTRIBUTES_SEQ
    INCREMENT 1
    START 1000000
;
CREATE SEQUENCE FEEDBACK_SEQ
    INCREMENT 1
    START 1000000
;

CREATE SEQUENCE DELIVERIES_SEQ
    INCREMENT 1
    START 1000000
;

CREATE OR REPLACE FUNCTION PaymentsFunc()
  RETURNS "trigger" AS
$BODY$
    BEGIN
      New.PAYMENT_ID:=nextval('PAYMENTS_SEQ');
      Return NEW;
    END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE;

CREATE OR REPLACE FUNCTION DeliveriesFunc()
  RETURNS "trigger" AS
$BODY$
    BEGIN
      New.DELIVERY_ID:=nextval('DELIVERIES_SEQ');
      Return NEW;
    END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE;

CREATE OR REPLACE FUNCTION UsersFunc()
  RETURNS "trigger" AS
$BODY$
    BEGIN
      New.USER_ID:=nextval('USERS_SEQ');
      Return NEW;
    END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE;

CREATE OR REPLACE FUNCTION PRODUCTSFunc()
  RETURNS "trigger" AS
$BODY$
    BEGIN
      New.PRODUCT_ID:=nextval('PRODUCTS_SEQ');
      Return NEW;
    END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE;

CREATE OR REPLACE FUNCTION OrderFunc()
  RETURNS "trigger" AS
$BODY$
    BEGIN
      New.ORDER_ID:=nextval('ORDERS_SEQ');
      Return NEW;
    END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE;

CREATE OR REPLACE FUNCTION ProdAttrFunc()
  RETURNS "trigger" AS
$BODY$
    BEGIN
      New.ATTRIBUTE_ID:=nextval('PRODUCTS_ATTRIBUTES_SEQ');
      Return NEW;
    END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE;

CREATE OR REPLACE FUNCTION FeedbackFunc()
  RETURNS "trigger" AS
$BODY$
    BEGIN
      New.FEEDBACK_ID:=nextval('FEEDBACK_SEQ');
      Return NEW;
    END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE;

CREATE trigger BI_PAYMENTS 
      before insert on PAYMENTS              
      for each row 
      EXECUTE PROCEDURE PaymentsFunc();
      
CREATE trigger BI_USERS  
      before insert on USERS             
      for each row 
      EXECUTE PROCEDURE UsersFunc();

CREATE trigger BI_PRODUCTS  
      before insert on PRODUCTS            
      for each row 
      EXECUTE PROCEDURE PRODUCTSFunc();
      
CREATE trigger BI_ORDERS  
      before insert on ORDERS              
      for each row 
      EXECUTE PROCEDURE OrderFunc();      
      
CREATE trigger BI_PROD_ATTRS 
      before insert on PRODUCTS_ATTRIBUTES              
      for each row 
      EXECUTE PROCEDURE ProdAttrFunc();      
      
CREATE trigger BI_FEEDBACK 
      before insert on FEEDBACK              
      for each row 
      EXECUTE PROCEDURE FeedbackFunc();  

	ALTER TABLE ORDERS ADD CONSTRAINT "ORDERS_USERS_FK" 
    FOREIGN KEY (USER_ID)
    REFERENCES USERS (USER_ID);

    ALTER TABLE ORDERS ADD CONSTRAINT "ORDERS_PAYMENTS_FK" 
    FOREIGN KEY (PAYMENT_ID)
    REFERENCES PAYMENTS (PAYMENT_ID);    

    ALTER TABLE ORDERS ADD CONSTRAINT "ORDERS_DELIVERIES_FK" 
    FOREIGN KEY (DELIVERY_ID)
    REFERENCES DELIVERIES (DELIVERY_ID);    

    ALTER TABLE ORDER_PRODUCTS ADD CONSTRAINT "ORDER_PRODUCTS_ORDER_FK" 
    FOREIGN KEY (ORDER_ID)
    REFERENCES ORDERS (ORDER_ID);

    ALTER TABLE ORDER_PRODUCTS ADD CONSTRAINT "ORDER_PRODUCTS_PRODUCT_FK" 
    FOREIGN KEY (PRODUCT_ID)
    REFERENCES PRODUCTS (PRODUCT_ID);

    ALTER TABLE PRODUCTS_ATTRIBUTES ADD CONSTRAINT "PRODUCTS_ATTRIBUTES_PRODUCT_FK" 
    FOREIGN KEY (PRODUCT_ID)
    REFERENCES PRODUCTS (PRODUCT_ID);

    ALTER TABLE PRODUCTS_PARAMETERS ADD CONSTRAINT "PRODUCT_PARAMS_PROD_FK"
    FOREIGN KEY (PRODUCT_ID)
    REFERENCES PRODUCTS (PRODUCT_ID);

    ALTER TABLE PRODUCTS_PARAMETERS ADD CONSTRAINT "PRODUCT_PARAMS_ATTR_FK2"
    FOREIGN KEY (ATTR_ID)
    REFERENCES PRODUCTS_ATTRIBUTES (ATTRIBUTE_ID);

    ALTER TABLE FEEDBACK ADD CONSTRAINT "FEEDBACK_FK" 
    FOREIGN KEY (USER_ID)
    REFERENCES USERS (USER_ID);

    ALTER TABLE FEEDBACK ADD CONSTRAINT "FEEDBACK_PRODUCT_FK" 
    FOREIGN KEY (PRODUCT_ID)
    REFERENCES PRODUCTS (PRODUCT_ID);


